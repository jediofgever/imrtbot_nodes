#!/usr/bin/env python

import rospy
from sensor_msgs.msg import Joy
from geometry_msgs.msg import Twist
from std_srvs.srv import Trigger, TriggerRequest, TriggerResponse

class IMRTTeleop:

    def __init__(self):
        self._num_buttons = 3
        self._cmd_pub = rospy.Publisher('teleop/cmd_vel', Twist, queue_size=1)
        rospy.Subscriber('joy', Joy, self._joy_callback)

        self._service_proxies = []
        self._prev_buttons = []
        for i in range(self._num_buttons):
            rospy.loginfo('addind service')
            service_proxy = rospy.ServiceProxy('teleop/button{}_trigger'.format(i+1), Trigger)
            self._service_proxies.append(service_proxy)
            self._prev_buttons.append(False)
        self._vx_gain = 0.7
        self._wz_gain = 0.9
        rospy.spin()

    def _joy_callback(self, joy_msg):
        vx = joy_msg.axes[0] * self._vx_gain
        wz = -joy_msg.axes[3] * self._wz_gain

        for i in range(len(self._service_proxies)):
            if joy_msg.buttons[i] and not self._prev_buttons[i]:   
                try:
                    req = TriggerRequest()
                    self._service_proxies[i].call(req)
                except rospy.ServiceException as e:
                    rospy.logwarn("Service call failed")

        self._prev_buttons = joy_msg.buttons

        twist_msg = Twist()
        twist_msg.linear.x = vx
        twist_msg.angular.z = wz
        self._cmd_pub.publish(twist_msg)


if __name__ == '__main__':
    rospy.init_node('imrt_teleop')
    IMRTTeleop()
    rospy.spin()
